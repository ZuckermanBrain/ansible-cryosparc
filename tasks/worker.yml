#Revised 3-Clause BSD License for Columbia University Kermit Software
#Copyright Â© 2020
#Trustees of Columbia University in the City of New York.
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    Neither the name of Columbia University nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- name: Check if the CUDA installer is already downloaded
  stat:
    path: /tmp/cuda_10.2.89_440.33.01_linux.run
  register: cuda_installer_check

- name: Check if CUDA is already installed.
  stat:
    path: "{{ cryosparc_cuda_path|default('', true)}}/targets/x86_64-linux/lib/libcudart.so"
  register: cuda_installation_check

- name: Check if the CryoSparc2 worker installer is already downloaded
  stat:
    path: /tmp/cryosparc2_worker.tar.gz
  register: worker_installer_check

- name: Check if the CryoSparc2 worker installer is already untarred
  stat:
    path: "{{ cryosparc_install_path }}/cryosparc2_worker"
  register: worker_untar_check

- name: Check if the CryoSparc2 worker has already been installed.
  stat:
    path: "{{ cryosparc_install_path }}/cryosparc2_worker/config.sh"
  register: worker_installation_check

# CUDA 10.2 is the max version of CUDA supported by CryoSparc 2 as of August 2020
- name: Download the CUDA 10.2 installer
  become: true
  become_user: "{{ cryosparc_user }}"
  get_url:
    url: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
    dest: /tmp/cuda_10.2.89_440.33.01_linux.run
    mode: "0770"
  when: "not cuda_installer_check.stat.exists and not cuda_installation_check.stat.exists and cryosparc_cuda_path is defined"

- name: Ensure that CUDA install path exists
  become: true
  become_user: "{{ cryosparc_user }}"
  file:
    path: "{{ cryosparc_cuda_path }}"
    state: directory
    owner: "{{ cryosparc_user }}"
  when: "not cuda_installation_check.stat.exists and cryosparc_cuda_path is defined"

- name: Run the CUDA 10.2 installer to install CUDA toolkit to a user-specific directory
  become: true
  become_user: "{{ cryosparc_user }}"
  command: "/tmp/cuda_10.2.89_440.33.01_linux.run --silent --toolkit --installpath={{ cryosparc_cuda_path }}"
  when: "not cuda_installation_check.stat.exists and cryosparc_cuda_path is defined"

- name: Remove the CUDA 10.2 installer
  file:
    path: /tmp/cuda_10.2.89_440.33.01_linux.run
    state: absent
  when: "not cuda_installation_check.stat.exists and cryosparc_cuda_path is defined"

- name: Download the CryoSparc2 worker installer
  become: true
  become_user: "{{ cryosparc_user }}"
  get_url:
    url: "https://get.cryosparc.com/download/worker-latest/{{ cryosparc_license_id }}"
    dest: /tmp/cryosparc2_worker.tar.gz
  no_log: true
  when: not worker_installer_check.stat.exists and not worker_untar_check.stat.exists and not worker_installation_check.stat.exists

- name: Ensure that install path exists
  become: true
  become_user: "{{ cryosparc_user }}"
  file:
    path: "{{ cryosparc_install_path }}"
    state: directory
    owner: "{{ cryosparc_user }}"

- name: Untar the CryoSparc2 worker installer
  become: true
  become_user: "{{ cryosparc_user }}"
  unarchive:
    src: /tmp/cryosparc2_worker.tar.gz
    remote_src: yes
    dest: "{{ cryosparc_install_path }}"
  when: not worker_untar_check.stat.exists and not worker_installation_check.stat.exists

# We prepend with /bin/bash because the installer doesn't use a shebang
- name: Run the CryoSparc2 worker installer
  become: true
  become_user: "{{ cryosparc_user }}"
  command: |
    /bin/bash {{ cryosparc_install_path }}/cryosparc2_worker/install.sh \
      --license ${LICENSE_ID} \
      {% if cryosparc_cuda_path|default(false, true) %}--cudapath {{ cryosparc_cuda_path }}{% endif %}
      {% if cryosparc_cuda_path|default(true, true) %}--nogpu {% endif %}
  environment:
    LICENSE_ID: "{{ cryosparc_license_id }}"
  when: "not worker_installation_check.stat.exists and 'standalone' not in cryosparc_roles"

# The installer doesn't add CryoSparc to the path via a bashrc file in non-interactive mode.
- name: Ensure that CryoSparc user's bashrc has line to update path.
  lineinfile:
    path: "{{ cryosparc_user_home }}/.bashrc"
    line: "export PATH={{ cryosparc_install_path }}/cryosparc2_worker/bin:${PATH}"
    create: yes
  when: not worker_installation_check.stat.exists

- name: Connect the CryoSparc2 worker to the master
  become: true
  become_user: "{{ cryosparc_user }}"
  command: |
    {{ cryosparc_install_path }}/cryosparc2_worker/bin/cryosparcw connect \
      --worker {{ cryosparc_worker_hostname }} \
      --master {{ cryosparc_master_hostname }} \
      --port {{ cryosparc_port_number }} \
      {% if cryosparc_ssd_path|default(false, true) %}--ssdpath {{ cryosparc_ssd_path }}{% endif %}
      {% if cryosparc_ssd_path|default(true, true) %}--nossd{% endif %}
  when: "not worker_installation_check.stat.exists and not cryosparc_cluster and 'standalone' not in cryosparc_roles"

- name: Remove CryoSparc worker tar.
  file:
    path: /tmp/cryosparc2_worker.tar.gz
    state: absent
  when: not worker_untar_check.stat.exists and not worker_installation_check.stat.exists
