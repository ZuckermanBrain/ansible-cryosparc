- name: Check if the CryoSparc2 master installer is already downloaded
  stat:
    path: /tmp/cryosparc2_master.tar.gz
  register: master_installer_check

- name: Check if the CryoSparc2 master installer is already untarred
  stat:
    path: "{{ cryosparc_install_path }}/cryosparc2_master"
  register: master_untar_check

- name: Check if the CryoSparc2 master has already been installed.
  stat:
    path: "{{ cryosparc_install_path }}/cryosparc2_master/config.sh"
  register: master_installation_check

- name: Download the CryoSparc2 master installer
  become: true
  become_user: "{{ cryosparc_user }}"
  get_url:
    url: "https://get.cryosparc.com/download/master-latest/{{ cryosparc_license_id }}"
    dest: /tmp/cryosparc2_master.tar.gz
  no_log: true
  when: not master_installer_check.stat.exists and not master_untar_check.stat.exists and not master_installation_check.stat.exists

- name: Ensure that install path exists
  become: true
  become_user: "{{ cryosparc_user }}"
  file:
    path: "{{ cryosparc_install_path }}"
    state: directory
    owner: "{{ cryosparc_user }}"

- name: Untar the CryoSparc2 master installer
  become: true
  become_user: "{{ cryosparc_user }}"
  unarchive:
    src: /tmp/cryosparc2_master.tar.gz
    remote_src: yes
    dest: "{{ cryosparc_install_path }}"
  when: not master_untar_check.stat.exists and not master_installation_check.stat.exists

# We prepend with /bin/bash because the installer doesn't use a shebang
- name: Run the CryoSparc2 master installer
  become: true
  become_user: "{{ cryosparc_user }}"
  command: "/bin/bash {{ cryosparc_install_path }}/cryosparc2_master/install.sh --yes --license ${LICENSE_ID}  --hostname {{ cryosparc_master_hostname }} --dbpath {{ cryosparc_db_path }} --port {{ cryosparc_port_number }}"
  environment:
    LICENSE_ID: "{{ cryosparc_license_id }}"
  when: "not master_installation_check.stat.exists and 'standalone' not in cryosparc_roles"

- name: Fix the CryoSparc2 master installer for a standalone deployment
  lineinfile:
    path: "{{ cryosparc_install_path }}/cryosparc2_master/install.sh"
    regexp: '\. \./install\.sh'
    line: "/bin/bash ./install.sh --license $LICENSE_ID --cudapath $CUDA_PATH --standalone"
  when: "not master_installation_check.stat.exists and 'standalone' in cryosparc_roles"

- name: Run the CryoSparc2 master installer for a standalone deployment
  become: true
  become_user: "{{ cryosparc_user }}"
  command: |
    /bin/bash {{ cryosparc_install_path }}/cryosparc2_master/install.sh \
      --standalone \
      --yes \
      --license ${LICENSE_ID} \
      --worker_path {{ cryosparc_install_path }}/cryosparc2_worker/ \
      --cudapath {{ cryosparc_cuda_path }} \ 
      --ssdpath {{ cryosparc_ssd_path }} \
      --initial_email {{ cryosparc_user_email  }} \
      --initial_password ${CRYOSPARC_PASSWORD} \
      --initial_name '{{ cryosparc_user_fullname }}'
  environment:
    LICENSE_ID: "{{ cryosparc_license_id }}"
    CRYOSPARC_PASSWORD : "{{ cryosparc_user_password }}"
  when: "not master_installation_check.stat.exists and 'standalone' in cryosparc_roles"

# The installer doesn't add CryoSparc to the path via a bashrc file in non-interactive mode.
- name: Ensure that CryoSparc user's bashrc has line to update path.
  lineinfile:
    path: "{{ cryosparc_user_home }}/.bashrc"
    line: "export PATH={{ cryosparc_install_path }}/cryosparc2_master/bin:${PATH}"
    create: yes
  when: not master_installation_check.stat.exists

- name: Start CryoSparc2 and create the CryoSparc2 admin user.
  become: true
  become_user: "{{ cryosparc_user }}"
  shell: |
    export PATH={{ cryosparc_install_path }}/cryosparc2_master/bin:${PATH}
    cryosparcm start
    export CRYOSPARC_PASSWORD={{ cryosparc_user_password }}
    cryosparcm createuser --email {{ cryosparc_user_email  }} --password ${CRYOSPARC_PASSWORD}  --name '{{ cryosparc_user_fullname }}'
  when: "not master_installation_check.stat.exists and 'standalone' not in cryosparc_roles"

# We restart cryosparc immediately afterwards because for some reason the login dialogue doesn't load properly if you don't do this.
- name: Restart CryoSparc2 
  become: true
  become_user: "{{ cryosparc_user }}"
  shell: |
    export PATH={{ cryosparc_install_path }}/cryosparc2_master/bin:${PATH}
    cryosparcm restart

- name: Remove CryoSparc master tar.
  file:
    path: /tmp/cryosparc2_master.tar.gz
    state: absent
  when: not master_untar_check.stat.exists and not master_installation_check.stat.exists

- name: Populate cluster_info.json
  become: true
  become_user: "{{ cryosparc_user }}"
  copy:
    content: "{{ cryosparc_cluster_info_config | to_json }}"
    dest: "{{ cryosparc_install_path }}/cryosparc2_master/cluster_info.json"
  when: cryosparc_cluster

- name: Populate cluster_script.sh
  become: true
  become_user: "{{ cryosparc_user }}"
  copy:
    src:  "{{ cryosparc_cluster_scheduler }}_cluster_script.sh"
    dest: "{{ cryosparc_install_path }}/cryosparc2_master/cluster_script.sh"
  when: cryosparc_cluster

- name: Create cluster configuration
  become: true
  become_user: "{{ cryosparc_user }}"
  shell: |
    export PATH={{ cryosparc_install_path }}/cryosparc2_master/bin:${PATH}
    cd {{ cryosparc_install_path }}/cryosparc2_master
    cryosparcm cluster connect
  when: cryosparc_cluster
